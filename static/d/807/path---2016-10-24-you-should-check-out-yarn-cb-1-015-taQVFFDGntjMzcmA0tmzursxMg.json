{"data":{"site":{"siteMetadata":{"title":"Christian Brevik","author":"Christian Brevik"}},"markdownRemark":{"id":"37bb0a05-2fd1-5a6c-a1e9-3b358dc50c63","excerpt":"Not too long ago, Facebook announced  Yarn , a new package manager for JavaScript. Yarn has been developed as an alternative to npm…","html":"<p>Not too long ago, Facebook announced <a href=\"https://github.com/yarnpkg/yarn\">Yarn</a>, a new package manager for JavaScript. Yarn has been developed as an alternative to npm, addressing some shortcomings the latter tool has.</p>\n<p>I know what you’re thinking, “Yet another new tooling in the JS ecosystem?”, and “Weren’t we just done deprecating bower?“.<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup></p>\n<p>But, hold your self-diagnosed JavaScript fatigue! Here’s few reasons why you should check out Yarn;</p>\n<h2>Deterministic installs</h2>\n<p>What exactly does “deterministic” mean in this context, and why should you care? According to definition a “deterministic algorithm” would, given a particular input, always produce the same output.</p>\n<p>Sometimes npm might introduce a sneaky bug in this regard. It does not always, given the same <code class=\"language-text\">package.json</code> (<em>input</em>), install the same versions of your dependencies (<em>output</em>). This is because of how npm resolves dependencies.</p>\n<p>Say you depend on <code class=\"language-text\">&quot;foo-module&quot;: &quot;^2.6.0&quot;</code> in your <code class=\"language-text\">package.json</code>. Here the caret (<code class=\"language-text\">^</code>) in front of the version number means that when you run <code class=\"language-text\">npm install</code>, it will install the newest <code class=\"language-text\">2.x.x</code> version of <code class=\"language-text\">foo-module</code>. But it will only do this if your <code class=\"language-text\">node_modules</code> folder does not already contain a <code class=\"language-text\">2.x.x</code> version of this module.</p>\n<p>What if a new <code class=\"language-text\">2.x.x</code> version has been released in the interim between you installing the dependencies on your machine, and another colleague on their machine? This fact may lead to you, and your colleagues, and your build servers having completely different versions of packages installed.</p>\n<p>Imagine there’s a bug in the newest version of <code class=\"language-text\">foo-module</code>. It works on certain machines, but not others. In this scenario you may have a difficult time discovering where the bug is. Worse if it happens at the end of a deploy pipeline.</p>\n<p>Even if you don’t use version number ranges in your <code class=\"language-text\">package.json</code>, the deps of your deps<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup> might.</p>\n<p>Yarn fixes this with the help of a file called <code class=\"language-text\">yarn.lock</code>. This file is generated by default, and it will lock down the specific versions to be installed. Of course this file must be checked in along with the rest of your code, so your colleagues and build servers can use it.</p>\n<p>Lockfiles aren’t anything new, several other package managers use them (with good reason). Even npm has <code class=\"language-text\">shrinkwrap</code> for this purpose. But the difference is that with Yarn the lockfile is updated automatically, whilst with npm you will have to remember to manually run <code class=\"language-text\">shrinkwrap</code>.</p>\n<h2>Much faster installs</h2>\n<p>Another benefit of having a lockfile is that Yarn knows exactly which dependencies to fetch. Even if your <code class=\"language-text\">package.json</code> says <code class=\"language-text\">^2.6.0</code> (<code class=\"language-text\">2.x.x</code>), your lockfile will nail it down to a very specific version, say <code class=\"language-text\">2.6.2</code>. This fact means that Yarn doesn’t have to do anything fancy before it starts to fetch packages. In fact it can start right away, parallelize requests, and effectively utilize your bandwidth.</p>\n<p>Yarn also keeps a global offline cache of the packages, which means that it will only hit the network when it truly needs to. Both of these improvements mean a <a href=\"http://yarnpkg.com/en/compare\">huge</a> <a href=\"https://medium.freecodecamp.com/npm-vs-yarn-benchmark-9b456de4aa96\">speed-up</a> in terms of install time.</p>\n<p>Even if you don’t care about anything else regarding Yarn, you will definitely notice the difference in install time. The global package cache is also a benefit to developers who have to work offline, or in low-bandwidth environments.</p>\n<p>Of course, there’s one potential downside; you will no longer have an excuse to go get coffee because of <code class=\"language-text\">npm install</code>.</p>\n<h2>What else?</h2>\n<p>Yarn supports both the npm and bower registries, which means you will not have to “migrate” your <code class=\"language-text\">package.json</code>.</p>\n<p>It supports <a href=\"https://yarnpkg.com/en/docs/cli/\">most of the commands</a> that npm does, with certain things renamed. For example <code class=\"language-text\">npm install --save foo-module</code> has become <code class=\"language-text\">yarn add foo-module</code>. While <code class=\"language-text\">npm install</code> is just <code class=\"language-text\">yarn</code>.</p>\n<p>Yarn is open source, more secure, and with several big industry players behind it. Even the <a href=\"http://blog.npmjs.org/post/151660845210/hello-yarn\">npm folks</a> have been pretty nice about the announcement.</p>\n<p>I believe Yarn is one of the better tools to be introduced in the JavaScript ecosystem, and you should totally <a href=\"https://yarnpkg.com/en/docs/install\">check it out.</a></p>\n<p><strong>Note:</strong> This was orginally <a href=\"http://blog.novanet.no/you-should-check-out-yarn/\">posted on the Novanet blog</a>. Check out that blog for more .NET-related content[.]</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>Okay, that might have been uncalled for.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>  Dependencies of your dependencies. It’s dependencies all the way down folks.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"You should check out Yarn","date":"October 24, 2016"}}},"pageContext":{"slug":"/2016-10-24-you-should-check-out-yarn/","previous":{"fields":{"slug":"/2016-04-24-gtm-ab-testing/"},"frontmatter":{"title":"Google Tag Manager and A/B-testing with React Native"}},"next":{"fields":{"slug":"/2017-05-16-easy-typescript-with-react-native/"},"frontmatter":{"title":"Easy TypeScript with React Native"}}}}