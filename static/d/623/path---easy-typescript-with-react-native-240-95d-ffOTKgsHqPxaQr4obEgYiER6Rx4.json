{"data":{"site":{"siteMetadata":{"title":"Christian Brevik","author":"Christian Brevik"}},"markdownRemark":{"id":"54bec0e0-7bf1-576c-bae8-c8cabbc3f477","excerpt":"Just here for the code sample?  Check it out here . Trying to combine  TypeScript  (TS) with  React Native  (RN) has historically been kind…","html":"<blockquote>\n<p>Just here for the code sample? <a href=\"https://github.com/cbrevik/react-native-typescript-starter\">Check it out here</a>.</p>\n</blockquote>\n<p>Trying to combine <a href=\"https://github.com/Microsoft/TypeScript\">TypeScript</a> (TS) with <a href=\"https://github.com/facebook/react-native\">React Native</a> (RN) has historically been kind of difficult. It has been possible by employing some clever, but hacky, solutions. The problem is, that those solutions are difficult to maintain. And they might become more cumbersome with every RN release, since they are unsupported.</p>\n<p>Using features which makes creating RN apps enjoyable, like Hot-Module Reloading (HMR), has also been a pain. Why this is may be a boring implementation detail. But suffice it to say, it has to do with the RN packager only watching <code class=\"language-text\">js</code> and <code class=\"language-text\">json</code> files. Updates to code files with other extensions do not trigger a reload.</p>\n<p>Now though, with the forthcoming release of RN <code class=\"language-text\">v0.45.0</code> you’ll have a better alternative. A <a href=\"https://github.com/facebook/react-native/pull/13689\">newly landed PR</a> (by <a href=\"https://github.com/ds300\">David Sheldrick</a>) allows you to customise which extension the packager should watch.</p>\n<p>The other piece of the puzzle, is that we need to compile TS down to JavaScript (JS) for the RN packager to pick up. Instead of doing this manually (either through <code class=\"language-text\">tsc</code> or hooking it up with <code class=\"language-text\">npm</code> scripts), we want this to happen automatically as part of a normal <code class=\"language-text\">react-native start</code> command.</p>\n<p>RN already provides the ability to hook in your own transformer through <code class=\"language-text\">react-native start --transformer ./path/to/transformer.js</code>. But it turns out you can actually do one better by supplying your own <code class=\"language-text\">rn-cli.config.js</code> and defining it there.</p>\n<p>And you won’t even have to write your own transformer, since David comes to the rescue here again with his <a href=\"https://github.com/ds300/react-native-typescript-transformer\">react-native-typescript-transfomer</a>.</p>\n<p>For simplity’s sake I’ll echo his installation instructions here. In your RN project folder, run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yarn add --dev react-native-typescript-transformer typescript</code></pre></div>\n<p>Next, in your project root, create a <code class=\"language-text\">rn-cli.config.js</code> file, and add the following</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getTransformModulePath</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'react-native-typescript-transformer'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">getSourceExts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'ts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'tsx'</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, here you’re setting the transformer to use (so you can just run <code class=\"language-text\">react-native start</code>). You’re also adding your custom source extensions which will (along with <code class=\"language-text\">js</code> and <code class=\"language-text\">json</code>) be picked up by the RN packager.</p>\n<p>You’ll also need a <code class=\"language-text\">tsconfig.json</code> file for the TS compiler with the following settings (in your project root):</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"es2015\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"jsx\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-native\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"moduleResolution\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"allowSyntheticDefaultImports\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That should be all you need to get the RN packager to pick up your TS source files, and compile them automatically to JS.</p>\n<p>This works with HMR, proper source maps and debugging, and everything else you come to expect from building an RN app!</p>\n<p>To get you started with the actual coding, I’ve also made a simple Counter-app (starter) project with Redux: <a href=\"https://github.com/cbrevik/react-native-typescript-starter\">react-native-typescript-starter</a>.</p>\n<p><strong>Note:</strong> This was orginally <a href=\"http://blog.novanet.no/easy-typescript-with-react-native/\">posted on the Novanet blog</a>. Check out that blog for more .NET-related content.</p>","frontmatter":{"title":"Easy TypeScript with React Native","date":"May 16, 2017"}}},"pageContext":{"slug":"/easy-typescript-with-react-native/","previous":{"fields":{"slug":"/you-should-check-out-yarn/"},"frontmatter":{"title":"You should check out Yarn"}},"next":{"fields":{"slug":"/intro-to-react-native/"},"frontmatter":{"title":"Intro to React Native (NDC Oslo 2017)"}}}}