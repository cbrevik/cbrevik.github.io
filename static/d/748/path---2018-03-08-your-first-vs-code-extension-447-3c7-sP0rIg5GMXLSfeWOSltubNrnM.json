{"data":{"site":{"siteMetadata":{"title":"Christian Brevik","author":"Christian Brevik"}},"markdownRemark":{"id":"086fadd4-ead8-5bf5-bc50-4f468ee2206f","excerpt":"It’s not a secret that VS Code is becoming a very popular choice as editor for many developers . I like the editor because it is snappy, and…","html":"<p>It’s not a secret that VS Code is becoming a very popular choice as editor for many developers<sup id=\"fnref-1\"><a href=\"#fn-1\" class=\"footnote-ref\">1</a></sup>. I like the editor because it is snappy, and has extensions for pretty much any language or framework I dive into.</p>\n<p>One feature I love using with VS Code is “Format on Save”, especially paired with code formatters like <a href=\"https://github.com/prettier/prettier\">Prettier</a>. But a thing which has annoyed me with that feature, is that it is kind of difficult to turn on and off.</p>\n<p>You have to go into the <code class=\"language-text\">settings.json</code> file and set the <code class=\"language-text\">editor.formatOnSave</code> field to <code class=\"language-text\">true</code> or <code class=\"language-text\">false</code>. This gets really tedious when you’re switching between projects, some of it Open Source with peculiar code formatting, or if you just don’t want to reformat a whole file for some small change.</p>\n<p>Maybe we could make life easier by creating an extension for this? Turns out that’s not so difficult.</p>\n<h3>Creating the extension project</h3>\n<p>The easiest way I’ve found to get started, is using <a href=\"http://yeoman.io/\">Yeoman</a> to create the extension project.</p>\n<p>Install both Yeoman and the extension template by running the following in your terminal of choice:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g yo generator-code</code></pre></div>\n<p>Then create the extension project by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">yo code</code></pre></div>\n<p>You will then get asked several questions to setup the project. These are the choices I made:</p>\n<ol>\n<li>What type of extension do you want to create? <strong>New Extension (TypeScript)</strong></li>\n<li>What’s the name of your extension? <strong>Toggle Format on Save</strong></li>\n<li>What’s the identifier of your extension? <strong>toggle-format-on-save</strong></li>\n<li>What’s the description of your extension? <strong>Provides a command to toggle Format on Save</strong></li>\n<li>What’s your publisher name? <strong>cbrevik</strong></li>\n<li>Enable stricter TypeScript checking in ‘tsconfig.json’? <strong>Yes</strong></li>\n<li>Setup linting using ‘tslint’? <strong>Yes</strong></li>\n<li>Initialize a git repository? <strong>Yes</strong></li>\n</ol>\n<p>I chose to create an extension written in TypeScript (1), but you also have other options like color themes or code snippets.</p>\n<p>The name (2) is what will be displayed for your extension in the VS Code marketplace. While the identifier (3) will be concatenated to your publisher name (5), which will uniquely identify your extension. In this case <code class=\"language-text\">cbrevik.toggle-format-on-save</code>.</p>\n<p>If you don’t have a publisher name yet, just put whatever. It can be changed later by editing the <code class=\"language-text\">publisher</code> field in the generated <code class=\"language-text\">package.json</code>. I’ll show you how to create a publisher further below in this post.</p>\n<p>The rest of the options are pretty straightforward. If in doubt, answer <strong>Yes</strong>.</p>\n<h3>Diving into the code</h3>\n<p>The template code defines a command called <code class=\"language-text\">Hello World</code> which will display a “Hello World!” notification at the top of your VS Code instance:</p>\n<p><img src=\"/helloworldloop-2dac0e8e29036acfcdb9a6578cd51ec9.gif\" alt=\"Hello world demo\"></p>\n<p>This is made possible by three connected snippets of code in the <code class=\"language-text\">package.json</code> file and the <code class=\"language-text\">src/extension.ts</code> file.</p>\n<p>You tell VS Code that your extension <strong>contributes</strong> a command by adding it in <code class=\"language-text\">package.json</code> under the <code class=\"language-text\">contributes</code> field, as an object in the <code class=\"language-text\">commands</code> array:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"contributes\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token property\">\"commands\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token property\">\"command\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"extension.sayHello\"</span><span class=\"token punctuation\">,</span>\n                <span class=\"token property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Hello World\"</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Take note of the <code class=\"language-text\">command</code> field value <code class=\"language-text\">extension.sayHello</code>, which is the key for this command. The <code class=\"language-text\">title</code> is the text displayed in the Command Palette you see in the gif above.</p>\n<p>Another thing which has to be added to <code class=\"language-text\">package.json</code> is <code class=\"language-text\">activationEvents</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">    <span class=\"token property\">\"activationEvents\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token string\">\"onCommand:extension.sayHello\"</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>This is because in VS Code, extensions are activated lazily. So you will have to define the events which will activate your extension. In our case, we say that our extension will be activated when the <code class=\"language-text\">extension.sayHello</code> command is run.<sup id=\"fnref-2\"><a href=\"#fn-2\" class=\"footnote-ref\">2</a></sup></p>\n<p>To actually implement the command itself, we have a <code class=\"language-text\">src/extension.ts</code> file, which exports an <code class=\"language-text\">activate</code> function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> vscode <span class=\"token keyword\">from</span> <span class=\"token string\">'vscode'</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">activate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> vscode<span class=\"token punctuation\">.</span>ExtensionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do stuff here</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function will, not surprisingly, be run when the <code class=\"language-text\">activationEvent</code> defined above is emitted. This happens when we run <code class=\"language-text\">Hello World</code> in the VS Code Command Palette.</p>\n<p>Inside the <code class=\"language-text\">activate</code> function we have to register the command implementation. Note that we’re using the same <code class=\"language-text\">command</code> key as defined in <code class=\"language-text\">package.json</code>.</p>\n<p>The command is also added to the <code class=\"language-text\">context.subscriptions</code> array, so it can be disposed if the extension is deactivated:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">activate</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">:</span> vscode<span class=\"token punctuation\">.</span>ExtensionContext<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> disposable <span class=\"token operator\">=</span> vscode<span class=\"token punctuation\">.</span>commands<span class=\"token punctuation\">.</span><span class=\"token function\">registerCommand</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">'extension.sayHello'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      vscode<span class=\"token punctuation\">.</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">showInformationMessage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span>\n\n  context<span class=\"token punctuation\">.</span>subscriptions<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>disposable<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you see the <code class=\"language-text\">registerCommand</code> function lets you define a callback, which is invoked when the command with the <code class=\"language-text\">extension.sayHello</code> key is run. This callback in turn displays the “Hello World!” notification at the top of your VS Code instance.</p>\n<h4>Debugging the extension</h4>\n<p>If you want to test the extension, this can be done by hitting <code class=\"language-text\">F5</code> on your keyboard (or <code class=\"language-text\">Debug -&gt; Start Debugging</code>) if you have the <strong>extension project</strong> open in VS Code. This will compile the TypeScript, and open a second <strong>test</strong> VS Code window with the extension loaded.</p>\n<p>In the <strong>test</strong> window, you can open the Command Palette (<code class=\"language-text\">CMD</code>/<code class=\"language-text\">CTRL</code>+<code class=\"language-text\">SHIFT</code>+<code class=\"language-text\">P</code>), type <code class=\"language-text\">Hello World</code>, and then hit <code class=\"language-text\">Enter</code>. This will activate your extension, and run the command implementation, which will display the “Hello World!” notification.</p>\n<p>You can also set breakpoints in the <strong>extension project</strong> window, and step-through the code as you would expect.</p>\n<p>If you want to do iterative development like this, you can have the code compile continuously by running <code class=\"language-text\">npm run watch</code> in the project folder. This means that whenever you make a code change in the extension project, this will re-compile the TypeScript.</p>\n<p>All you have to do then, is reload the <strong>test</strong> window, by running <code class=\"language-text\">Reload Window</code> from your Command Palette in that window. Almost like doing web development!</p>\n<h4>Publishing your extension</h4>\n<p>When you’re ready to publish your extension to the marketplace, you will have to create a <code class=\"language-text\">publisher</code>.</p>\n<p>In order to do this, you need a <a href=\"https://docs.microsoft.com/vsts/accounts/create-account-msa-or-work-student#create-your-account-and-sign-up-for-vsts\">Visual Studio Team Services account</a>. This is because VS Code leverages VSTS to publish to the marketplace.</p>\n<p>During the registration process you will have to define a username. The account home page URL will have the format <code class=\"language-text\">&lt;your-username&gt;.visualstudio.com</code>.</p>\n<p>For anyone already registered, and unsure of their username, you can go to <a href=\"https://visualstudio.com\">https://visualstudio.com</a>, login, and you will see your accounts.</p>\n<p>You should then go to your account home page, click on your avatar in the menu top-right, and select <code class=\"language-text\">Security</code>. Under <code class=\"language-text\">Personal Access Token</code> you select <code class=\"language-text\">Add</code>. Fill in the following:</p>\n<ul>\n<li>Description: <strong>vsce</strong></li>\n<li>Expires In: <strong>1 year</strong></li>\n<li>Accounts: <strong>All accessible accounts</strong></li>\n<li>Authorized scopes: <strong>All scopes</strong></li>\n</ul>\n<p>Next click <code class=\"language-text\">Create Token</code> below. You now have the <code class=\"language-text\">Personal Access Token</code> which will be used to publish the extension. Keep this safe, as it will only be shown once.</p>\n<p>Now you will have to install the publishing tool:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g vsce</code></pre></div>\n<p>Then create the publisher by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">vsce create-publisher <span class=\"token operator\">&lt;</span>your-publisher-name<span class=\"token operator\">></span></code></pre></div>\n<p>You will then be asked for a friendly display name, e-mail, and the <code class=\"language-text\">Personal Access Token</code> we just created.</p>\n<p>Remember earlier in the post when I asked you to input whatever publisher in the <code class=\"language-text\">yo code</code> template generator? If your created publisher name doesn’t match the <code class=\"language-text\">publisher</code> field in the <code class=\"language-text\">package.json</code> file, you will now have to update it.</p>\n<p>If you host the code on Github or similar, you can link back to the repository from the marketplace, by specifying the repository URL in your <code class=\"language-text\">package.json</code>. For my extension this would be:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\">  <span class=\"token property\">\"repository\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"type\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"git\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://github.com/cbrevik/toggle-format-on-save\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Finally, to actually publish your extension, navigate to your project folder, and run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">vsce publish</code></pre></div>\n<p>If you want to publish updates later, you can increment the <code class=\"language-text\">version</code> field in <code class=\"language-text\">package.json</code>, and then publish. The tool can also do increment and publish in one go if you run:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">vsce publish minor</code></pre></div>\n<p>This follows <a href=\"https://semver.org\">semver</a>, so you can replace <code class=\"language-text\">minor</code> with <code class=\"language-text\">major</code> or <code class=\"language-text\">patch</code>.</p>\n<h4>Toggle Format on Save</h4>\n<p>The very simple extension I wrote about in the introduction is published at the VS Code marketplace as <a href=\"https://marketplace.visualstudio.com/items?itemName=cbrevik.toggle-format-on-save\">Toggle Format on Save</a>.</p>\n<p>You can take a <a href=\"https://github.com/cbrevik/toggle-format-on-save\">look at the code</a> if you’re interested, which does a bit more than just print “Hello World!“.</p>\n<p>Hope this post has been helpful!</p>\n<p><strong>Note:</strong> This was orginally <a href=\"https://blog.novanet.no/your-first-vs-code-extension/\">posted on the Novanet blog</a>. Check out that blog for more .NET-related content.</p>\n<div class=\"footnotes\">\n<hr>\n<ol>\n<li id=\"fn-1\">\n<p>  According to StackOverflow’s 2017 Developer Survey it places <a href=\"https://insights.stackoverflow.com/survey/2017#technology-most-popular-developer-environments-by-occupation\">5th among web developers</a>.</p>\n<a href=\"#fnref-1\" class=\"footnote-backref\">↩</a>\n</li>\n<li id=\"fn-2\">\n<p>  <a href=\"https://code.visualstudio.com/docs/extensionAPI/activation-events\">Several more activation events can be defined.</a> You could even use wildcard to activate your extension at startup. Though that is not recommended unless necessary.</p>\n<a href=\"#fnref-2\" class=\"footnote-backref\">↩</a>\n</li>\n</ol>\n</div>","frontmatter":{"title":"Your first VS Code extension","date":"March 08, 2018"}}},"pageContext":{"slug":"/2018-03-08-your-first-vs-code-extension/","previous":{"fields":{"slug":"/2017-08-19-patch-package/"},"frontmatter":{"title":"Easier React Native upgrades with patch-package"}},"next":null}}